type UserId = principal;
type User = 
 record {
   email: text;
   id: UserId;
   joinedAt: Time;
   pictureCid: text;
   username: text;
 };
type TrendData = 
 record {
   category: text;
   timestamp: int;
   value: float64;
 };
type Time = int;
type Report = 
 record {
   category: text;
   confidence: text;
   coordinates: Location;
   description: text;
   id: text;
   imageCid: text;
   location: text;
   presentage_confidence: text;
   rewardGiven: opt float64;
   status: text;
   timestamp: Time;
   user: UserId;
 };
type Location = 
 record {
   latitude: float64;
   longitude: float64;
 };
service : {
  addReport: (id: text, report: Report) -> ();
  addUser: (email: text, username: text, pictureCid: text) ->
   (record {
      error: opt text;
      success: bool;
    });
  getCategoryByYear: (year: int) -> (vec TrendData);
  getDailyTrends: () -> (vec TrendData);
  getLatestReport: () -> (opt Report);
  getMonthlyTrends: () -> (vec TrendData);
  getMostReportedCategory: () -> (opt text);
  getMyProfile: () -> (opt User);
  getReport: (id: text) -> (opt Report);
  getReportByUser: () -> (vec Report);
  getReportsThisWeek: () -> (vec Report);
  getTrendsByCategory: (category: text) -> (vec TrendData);
  getUsers: () -> (vec User);
  getValidReportCount: () -> (nat);
  getValidReports: () -> (vec Report);
  getValidWeeklyReportCount: () -> (nat);
  getWeeklyTrends: () -> (vec TrendData);
  updateUser: (email: opt text, username: opt text, pictureCid: opt text) ->
   (record {
      error: opt text;
      success: bool;
    });
}
