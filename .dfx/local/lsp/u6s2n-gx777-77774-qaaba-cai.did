type Account = record { owner : principal; subaccount : opt Subaccount };
type Allowance = record { allowance : nat; expires_at : opt nat64 };
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : TxIndex };
  BadFee : record { expected_fee : Tokens };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : Timestamp };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : Tokens };
};
type Ledger = service {
  icrc1_balance_of : (Account) -> (Tokens) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; Value }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (
      vec record { url : text; name : text },
    ) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (Tokens) query;
  icrc1_transfer : (
      record {
        to : Account;
        fee : opt Tokens;
        memo : opt Memo;
        from_subaccount : opt Subaccount;
        created_at_time : opt Timestamp;
        amount : Tokens;
      },
    ) -> (Result_2);
  icrc2_allowance : (record { account : Account; spender : Account }) -> (
      Allowance,
    ) query;
  icrc2_approve : (
      record {
        fee : opt Tokens;
        memo : opt Memo;
        from_subaccount : opt Subaccount;
        created_at_time : opt Timestamp;
        amount : nat;
        expected_allowance : opt nat;
        expires_at : opt nat64;
        spender : Account;
      },
    ) -> (Result_1);
  icrc2_transfer_from : (
      record {
        to : Account;
        fee : opt Tokens;
        spender_subaccount : opt Subaccount;
        from : Account;
        memo : opt Memo;
        created_at_time : opt Timestamp;
        amount : Tokens;
      },
    ) -> (Result);
};
type Memo = blob;
type Result = variant { Ok : TxIndex; Err : TransferFromError };
type Result_1 = variant { Ok : TxIndex; Err : ApproveError };
type Result_2 = variant { Ok : TxIndex; Err : TransferError };
type Subaccount = blob;
type Timestamp = nat64;
type Tokens = nat;
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : Tokens };
  Duplicate : record { duplicate_of : TxIndex };
  BadFee : record { expected_fee : Tokens };
  CreatedInFuture : record { ledger_time : Timestamp };
  TooOld;
  InsufficientFunds : record { balance : Tokens };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : Tokens };
  Duplicate : record { duplicate_of : TxIndex };
  BadFee : record { expected_fee : Tokens };
  CreatedInFuture : record { ledger_time : Timestamp };
  TooOld;
  InsufficientFunds : record { balance : Tokens };
};
type TxIndex = nat;
type Value = variant { Int : int; Nat : nat; Blob : blob; Text : text };
service : Ledger